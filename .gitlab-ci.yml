include:
  - project: "gds-engineering-bootcamp/templates"
    ref: "main"
    file:
      - .gitlab-aws-cli.yml

stages:
  - build
  - test
  - publish
  - deploy

# Build stage will build your docker image and stage a copy in Gitlab's Container Registry
build-stage:
  image: docker:stable
  stage: build
  variables:
    # Variable holding the name of Gitlab Container Registry
    CONTAINER_BUILD_IMAGE: $CI_REGISTRY_IMAGE:latest
  tags: # Use tags if you have setup your own local Gitlab Runner, else you can omit this
    - local
  before_script:
    # Login to Gitlab Conatiner Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Build and tag your image to the name of $CONTAINER_BUILD_IMAGE
    - docker build -t $CONTAINER_BUILD_IMAGE .
    # Push image to Gitlab Container Registry
    - docker push $CONTAINER_BUILD_IMAGE

# Test stage will be used to run unit testing to make sure your image is ready to be deployed
test-stage:
  stage: test
  script:
    # Run Unit Test
    - echo "Run unit test"

# Publish stage will establish a connection with AWS and publish your staged image to the Elastic Container Registry
publish-stage:
  extends: .invoke-awscli-commands-with-assumerole
  # Extends defines the job action that it inherited from
  image:
    # This image is a special image that is build with both Docker and AWS components
    name: $CI_REGISTRY/gds-engineering-bootcamp/templates
    entrypoint:
      - '/usr/bin/env'
  tags: # Use tags if you have setup your own local Gitlab Runner, else you can omit this
    - local
  variables:
    # Enter ROLE_ARN of your created role from the previous aws setup
    ROLE_ARN: arn:aws:iam::477843748912:role/gitlab-bootcamp-oidc-role
    ECR_REGISTRY: 477843748912.dkr.ecr.ap-southeast-1.amazonaws.com/backend_bootcamp:latest
  stage: publish
  script:
    # Login to Gitlab Conatiner Registry
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Retrieve Image from Registry
    - docker pull $CI_REGISTRY_IMAGE:latest
    # Re-Tag pulled image to ECR Registry Name
    - docker tag $CI_REGISTRY_IMAGE:latest $ECR_REGISTRY
    # Login to ECR Registry 
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 477843748912.dkr.ecr.ap-southeast-1.amazonaws.com
    # Push to ECR Registry
    - docker push $ECR_REGISTRY

# Deploy stage will run an ecs update command to force a new image deployment
deploy-stage:
  extends: .invoke-awscli-commands-with-assumerole
  stage: deploy
  tags: # Use tags if you have setup your own local Gitlab Runner, else you can omit this
    - local
  variables:
    # Enter ROLE_ARN of your created role from the previous aws setup
    ROLE_ARN: arn:aws:iam::477843748912:role/gitlab-bootcamp-oidc-role
  script:
    # Command to update ECS Service
    - aws ecs update-service --cluster bootcamp-demo-application --service backend-app --force-new-deployment --region ap-southeast-1
  # Enforces manual triggered deployment to prevent accidental runs
  when: manual